From 3ec50ef209880465ad231af056dde48e6d269e6c Mon Sep 17 00:00:00 2001
From: Pritesh Patel <pritesh.patel@einfochips.com>
Date: Thu, 8 Aug 2024 07:45:51 +0000
Subject: [PATCH] lib: sbi: Modify CSR values

- Changed CSR 0x7C3 and 0x7C4

Upstream-Status: Pending

Signed-off-by: Pritesh Patel <pritesh.patel@einfochips.com>
---
 include/sbi/sbi_hart.h |  2 +-
 lib/sbi/sbi_hart.c     | 27 +--------------------------
 lib/sbi/sbi_init.c     | 22 ++++++++++------------
 3 files changed, 12 insertions(+), 39 deletions(-)

diff --git a/include/sbi/sbi_hart.h b/include/sbi/sbi_hart.h
index 17a1256..0d33246 100644
--- a/include/sbi/sbi_hart.h
+++ b/include/sbi/sbi_hart.h
@@ -111,7 +111,7 @@ unsigned int sbi_hart_pmp_addrbits(struct sbi_scratch *scratch);
 unsigned int sbi_hart_mhpm_bits(struct sbi_scratch *scratch);
 int sbi_hart_pmp_configure(struct sbi_scratch *scratch);
 #ifdef CONFIG_PLATFORM_ESWIN
-void sbi_hart_blocker_fscr_configure(struct sbi_scratch *scratch);
+void sbi_configure_hart_blocker(struct sbi_scratch *scratch);
 #endif
 int sbi_hart_map_saddr(unsigned long base, unsigned long size);
 int sbi_hart_unmap_saddr(void);
diff --git a/lib/sbi/sbi_hart.c b/lib/sbi/sbi_hart.c
index 3472f88..9f5d841 100644
--- a/lib/sbi/sbi_hart.c
+++ b/lib/sbi/sbi_hart.c
@@ -571,30 +571,7 @@ static void init_bus_blocker(void)
 	writel(1,BLOCKER_TL256D2D_IN);
 }
 
-static void init_fcsr(void)
-{
-	unsigned long hwpf;     // Hardware Prefetcher 0 : 0x104095C1BE241 | Hardware Prefetcher 1 : 0x38c84e
-
-	hwpf = 0x104095C1BE241UL;
-	__asm__ volatile("csrw 0x7c3 , %0" : : "r"(hwpf));
-	hwpf = 0x929FUL;
-
-	//cleanup fields
-	hwpf &= (~(0x1f << 5)); //[9:5]  cleanup  hitCacheThrdL2
-	hwpf &= (~(0x7  << 14)); //[16:14] cleanup numL2PFIssQEnt
-
-	//set new value
-	hwpf |= (0x1f << 5); //[9:5]    hitCacheThrdL2
-	hwpf |= (0x7  << 14); //[16:14] numL2PFIssQEnt
-
-	__asm__ volatile("csrw 0x7c4 , %0" : : "r"(hwpf));
-
-	/* enable speculative icache refill */
-	__asm__ volatile("csrw 0x7c1 , x0" : :);
-	__asm__ volatile("csrw 0x7c2 , x0" : :);
-}
-
-void sbi_hart_blocker_fscr_configure(struct sbi_scratch *scratch)
+void sbi_configure_hart_blocker(struct sbi_scratch *scratch)
 {
 	struct sbi_domain *dom = sbi_domain_thishart_ptr();
 
@@ -603,8 +580,6 @@ void sbi_hart_blocker_fscr_configure(struct sbi_scratch *scratch)
 		   generate fake response when access remote target */
 		init_bus_blocker();
 	}
-
-	init_fcsr();
 }
 #endif
 
diff --git a/lib/sbi/sbi_init.c b/lib/sbi/sbi_init.c
index 8752a8a..89f8fe7 100644
--- a/lib/sbi/sbi_init.c
+++ b/lib/sbi/sbi_init.c
@@ -364,7 +364,7 @@ static void __noreturn init_coldboot(struct sbi_scratch *scratch, u32 hartid)
 	}
 
 #ifdef CONFIG_PLATFORM_ESWIN
-	sbi_hart_blocker_fscr_configure(scratch);
+	sbi_configure_hart_blocker(scratch);
 #endif
 
 	/*
@@ -461,7 +461,7 @@ static void __noreturn init_warm_startup(struct sbi_scratch *scratch,
 		sbi_hart_hang();
 
 #ifdef CONFIG_PLATFORM_ESWIN
-	sbi_hart_blocker_fscr_configure(scratch);
+	sbi_configure_hart_blocker(scratch);
 #endif
 
 	rc = sbi_platform_final_init(plat, false);
@@ -498,7 +498,7 @@ static void __noreturn init_warm_resume(struct sbi_scratch *scratch,
 		sbi_hart_hang();
 
 #ifdef CONFIG_PLATFORM_ESWIN
-	sbi_hart_blocker_fscr_configure(scratch);
+	sbi_configure_hart_blocker(scratch);
 #endif
 
 	sbi_hsm_hart_resume_finish(scratch, hartid);
@@ -597,17 +597,15 @@ void __noreturn sbi_init(struct sbi_scratch *scratch)
 		sbi_hart_hang();
 
 #ifdef CONFIG_PLATFORM_ESWIN
-	hwpf = 0x104095C1BE241UL;
-	__asm__ volatile("csrw 0x7c3 , %0" : : "r"(hwpf));
-	hwpf = 0x929FUL;
-	//cleanup fields
-	hwpf &= (~(0x1f << 5)); //[9:5]  cleanup  hitCacheThrdL2
-	hwpf &= (~(0x7  << 14)); //[16:14] cleanup numL2PFIssQEnt
+	/* Set CSR 0x7C1 to 0 to enable speculative icache refill */
+	__asm__ volatile("csrw 0x7c1 , x0" : :);
 
-	//set new value
-	hwpf |= (0x1f << 5); //[9:5]    hitCacheThrdL2
-	hwpf |= (0x7  << 14); //[16:14] numL2PFIssQEnt
+	/* Set CSR 0x7C3 to 0x5c1be649 */
+	hwpf = 0x5c1be649UL;
+	__asm__ volatile("csrw 0x7c3 , %0" : : "r"(hwpf));
 
+	/* Set CSR 0x7C4 to 0x929F */
+	hwpf = 0x929FUL;
 	__asm__ volatile("csrw 0x7c4 , %0" : : "r"(hwpf));
 #endif
 
-- 
2.25.1

